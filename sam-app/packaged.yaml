AWSTemplateFormatVersion: '2010-09-09'
Description: 'sam-app

  Sample SAM Template for sam-app

  '
Globals:
  Function:
    Timeout: 3
Outputs:
  SiteNameApi:
    Description: API Gateway endpoint URL for Prod stage for Spa Sample function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/contents/{filename+}
  SiteNameFunction:
    Description: Site Name Lambda Function ARN
    Value:
      Fn::GetAtt:
      - SiteNameFunction
      - Arn
  SiteNameFunctionIamRole:
    Description: Implicit IAM Role created for Site Name function
    Value:
      Fn::GetAtt:
      - SiteNameFunctionRole
      - Arn
Resources:
  SiteNameFunction:
    Properties:
      CodeUri: s3://site-name-20190112-cloud-formation/de1fd09305ba1d495de9be4583bbcedd
      Environment:
        Variables:
          PARAM1: VALUE
      Events:
        contentsUrlAccess:
          Properties:
            Method: get
            Path: /contents/{filename+}
          Type: Api
        rootUrlAccess:
          Properties:
            Method: get
            Path: /
          Type: Api
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - SiteNameFunctionRole
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  SiteNameFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource: arn:aws:s3:::sitename20190112/*
          - Action: s3:GetObject
            Effect: Allow
            Resource: arn:aws:s3:::sitename20190112/*
          - Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: SiteNameFunctionPolicy
    Type: AWS::IAM::Role
Transform: AWS::Serverless-2016-10-31
